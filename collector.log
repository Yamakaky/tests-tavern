2022-09-17T17:37:29.843Z	info	service/telemetry.go:102	Setting up own telemetry...
2022-09-17T17:37:29.843Z	info	service/telemetry.go:137	Serving Prometheus metrics	{"address": ":8888", "level": "basic"}
2022-09-17T17:37:29.843Z	info	components/components.go:30	In development component. May change in the future.	{"kind": "exporter", "data_type": "traces", "name": "logging", "stability": "in development"}
2022-09-17T17:37:29.845Z	info	extensions/extensions.go:42	Starting extensions...
2022-09-17T17:37:29.845Z	info	pipelines/pipelines.go:74	Starting exporters...
2022-09-17T17:37:29.845Z	info	pipelines/pipelines.go:78	Exporter is starting...	{"kind": "exporter", "data_type": "traces", "name": "logging"}
2022-09-17T17:37:29.845Z	info	pipelines/pipelines.go:82	Exporter started.	{"kind": "exporter", "data_type": "traces", "name": "logging"}
2022-09-17T17:37:29.845Z	info	pipelines/pipelines.go:86	Starting processors...
2022-09-17T17:37:29.845Z	info	pipelines/pipelines.go:98	Starting receivers...
2022-09-17T17:37:29.845Z	info	pipelines/pipelines.go:102	Receiver is starting...	{"kind": "receiver", "name": "otlp", "pipeline": "traces"}
2022-09-17T17:37:29.845Z	info	otlpreceiver/otlp.go:70	Starting GRPC server on endpoint 0.0.0.0:4317	{"kind": "receiver", "name": "otlp", "pipeline": "traces"}
2022-09-17T17:37:29.845Z	info	otlpreceiver/otlp.go:88	Starting HTTP server on endpoint 0.0.0.0:4318	{"kind": "receiver", "name": "otlp", "pipeline": "traces"}
2022-09-17T17:37:29.845Z	info	pipelines/pipelines.go:106	Receiver started.	{"kind": "receiver", "name": "otlp", "pipeline": "traces"}
2022-09-17T17:37:29.845Z	info	service/collector.go:215	Starting otelcol...	{"Version": "0.56.0", "NumCPU": 24}
2022-09-17T17:37:29.845Z	info	service/collector.go:128	Everything is ready. Begin running and processing data.
2022-09-17T17:37:32.886Z	info	TracesExporter	{"kind": "exporter", "data_type": "traces", "name": "logging", "#spans": 5}
2022-09-17T17:37:32.886Z	info	ResourceSpans #0
Resource SchemaURL: 
Resource labels:
     -> telemetry.sdk.language: STRING(python)
     -> telemetry.sdk.name: STRING(opentelemetry)
     -> telemetry.sdk.version: STRING(1.12.0)
     -> service.name: STRING(tests-tavern)
     -> process.runtime.name: STRING(cpython)
     -> process.runtime.version: STRING(3.10.7)
     -> process.runtime.description: STRING(3.10.7 (main, Sep  6 2022, 21:22:27) [GCC 12.2.0])
     -> process.pid: INT(57130)
     -> process.executable.name: STRING(pytest)
     -> process.executable.path: STRING(/usr/bin/python3.10)
     -> process.command_line: STRING(/home/mikael/dev/python/tests-tavern/.venv/bin/python /home/mikael/dev/python/tests-tavern/.venv/bin/pytest --export-traces --tavern-global-cfg cfg.yaml)
     -> process.command: STRING(/home/mikael/dev/python/tests-tavern/.venv/bin/python)
     -> process.command_args: STRING(/home/mikael/dev/python/tests-tavern/.venv/bin/pytest --export-traces --tavern-global-cfg cfg.yaml)
     -> process.owner: STRING(mikael)
     -> service.version: STRING(706cf62bdb8449aa71b1dbced86198dbfd7e9600)
ScopeSpans #0
ScopeSpans SchemaURL: 
InstrumentationScope pytest-opentelemetry 
Span #0
    Trace ID       : e43e5d9b36d2fca2a5a0c2d9df82d156
    Parent ID      : a70b2403a8d907e0
    ID             : 8c26b6a0d1630a12
    Name           : Get some fake data from the JSON placeholder API[1]
    Kind           : SPAN_KIND_INTERNAL
    Start time     : 2022-09-17 17:37:32.386687717 +0000 UTC
    End time       : 2022-09-17 17:37:32.534576064 +0000 UTC
    Status code    : STATUS_CODE_ERROR
    Status message : <class 'tavern.util.exceptions.TestFailError'>: Test 'Make sure we have the right ID' failed:
- Key mismatch: (expected["userId"] = '2' (type = <class 'int'>), actual["userId"] = '1' (type = <class 'int'>))
Attributes:
     -> code.filepath: STRING(tests/test_otel.tavern.yaml)
     -> code.function: STRING(Get some fake data from the JSON placeholder API[1])
     -> pytest.nodeid: STRING(tests/test_otel.tavern.yaml::Get some fake data from the JSON placeholder API[1])
     -> pytest.keywords: STRING(<NodeKeywords for node <YamlItem Get some fake data from the JSON placeholder API[1]>>)
     -> pytest.span_type: STRING(test)
Events:
SpanEvent #0
     -> Name: exception
     -> Timestamp: 2022-09-17 17:37:32.534383535 +0000 UTC
     -> DroppedAttributesCount: 0
     -> Attributes:
         -> exception.type: STRING(TestFailError)
         -> exception.message: STRING(Test 'Make sure we have the right ID' failed:
- Key mismatch: (expected["userId"] = '2' (type = <class 'int'>), actual["userId"] = '1' (type = <class 'int'>)))
         -> exception.stacktrace: STRING(Format variables:
  var = '1'

Source test stage (line 13):
  - name: Make sure we have the right ID
    request:
      url: "https://jsonplaceholder.typicode.com/posts/{var}"
      method: GET
    response:
      status_code: 200
      json:
        id: 1
        userId: 2
        title: "sunt aut facere repellat provident occaecati excepturi optio reprehenderit"
        body: "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"

Formatted stage:
  name: Make sure we have the right ID
  request:
    method: GET
    url: https://jsonplaceholder.typicode.com/posts/1
  response:
    json:
      body: 'quia et suscipit
        suscipit recusandae consequuntur expedita et cum
        reprehenderit molestiae ut ut quas totam
        nostrum rerum est autem sunt rem eveniet architecto'
      id: 1
      title: sunt aut facere repellat provident occaecati excepturi optio reprehenderit
      userId: 2
    status_code: 200

Errors:
E   tavern.util.exceptions.TestFailError: Test 'Make sure we have the right ID' failed:
    - Key mismatch: (expected["userId"] = '2' (type = <class 'int'>), actual["userId"] = '1' (type = <class 'int'>)))
         -> exception.escaped: STRING(False)
Span #1
    Trace ID       : e43e5d9b36d2fca2a5a0c2d9df82d156
    Parent ID      : a70b2403a8d907e0
    ID             : 495fa7cb693d5d54
    Name           : Get some fake data from the JSON placeholder API[2]
    Kind           : SPAN_KIND_INTERNAL
    Start time     : 2022-09-17 17:37:32.534720063 +0000 UTC
    End time       : 2022-09-17 17:37:32.842332246 +0000 UTC
    Status code    : STATUS_CODE_ERROR
    Status message : <class 'tavern.util.exceptions.TestFailError'>: Test 'Make sure we have the right ID' failed:
- Key mismatch: (expected["title"] = 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit' (type = <class 'tavern.util.formatted_str.FormattedString'>), actual["title"] = 'qui est esse' (type = <class 'str'>))
Attributes:
     -> code.filepath: STRING(tests/test_otel.tavern.yaml)
     -> code.function: STRING(Get some fake data from the JSON placeholder API[2])
     -> pytest.nodeid: STRING(tests/test_otel.tavern.yaml::Get some fake data from the JSON placeholder API[2])
     -> pytest.keywords: STRING(<NodeKeywords for node <YamlItem Get some fake data from the JSON placeholder API[2]>>)
     -> pytest.span_type: STRING(test)
Events:
SpanEvent #0
     -> Name: exception
     -> Timestamp: 2022-09-17 17:37:32.842125168 +0000 UTC
     -> DroppedAttributesCount: 0
     -> Attributes:
         -> exception.type: STRING(TestFailError)
         -> exception.message: STRING(Test 'Make sure we have the right ID' failed:
- Key mismatch: (expected["title"] = 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit' (type = <class 'tavern.util.formatted_str.FormattedString'>), actual["title"] = 'qui est esse' (type = <class 'str'>)))
         -> exception.stacktrace: STRING(Format variables:
  var = '2'

Source test stage (line 13):
  - name: Make sure we have the right ID
    request:
      url: "https://jsonplaceholder.typicode.com/posts/{var}"
      method: GET
    response:
      status_code: 200
      json:
        id: 1
        userId: 2
        title: "sunt aut facere repellat provident occaecati excepturi optio reprehenderit"
        body: "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"

Formatted stage:
  name: Make sure we have the right ID
  request:
    method: GET
    url: https://jsonplaceholder.typicode.com/posts/2
  response:
    json:
      body: 'quia et suscipit
        suscipit recusandae consequuntur expedita et cum
        reprehenderit molestiae ut ut quas totam
        nostrum rerum est autem sunt rem eveniet architecto'
      id: 1
      title: sunt aut facere repellat provident occaecati excepturi optio reprehenderit
      userId: 2
    status_code: 200

Errors:
E   tavern.util.exceptions.TestFailError: Test 'Make sure we have the right ID' failed:
    - Key mismatch: (expected["title"] = 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit' (type = <class 'tavern.util.formatted_str.FormattedString'>), actual["title"] = 'qui est esse' (type = <class 'str'>)))
         -> exception.escaped: STRING(False)
Span #2
    Trace ID       : e43e5d9b36d2fca2a5a0c2d9df82d156
    Parent ID      : a70b2403a8d907e0
    ID             : 9b9576dfca5d6e5a
    Name           : test_fn
    Kind           : SPAN_KIND_INTERNAL
    Start time     : 2022-09-17 17:37:32.842460746 +0000 UTC
    End time       : 2022-09-17 17:37:32.868081316 +0000 UTC
    Status code    : STATUS_CODE_ERROR
    Status message : <class 'AssertionError'>: assert 1 == 2
Attributes:
     -> code.filepath: STRING(tests/test_pytest.py)
     -> code.function: STRING(test_fn)
     -> pytest.nodeid: STRING(tests/test_pytest.py::test_fn)
     -> pytest.keywords: STRING(<NodeKeywords for node <Function test_fn>>)
     -> pytest.span_type: STRING(test)
Events:
SpanEvent #0
     -> Name: exception
     -> Timestamp: 2022-09-17 17:37:32.867949567 +0000 UTC
     -> DroppedAttributesCount: 0
     -> Attributes:
         -> exception.type: STRING(AssertionError)
         -> exception.message: STRING(assert 1 == 2)
         -> exception.stacktrace: STRING(def test_fn():
>       assert 1 == 2
E       assert 1 == 2

tests/test_pytest.py:2: AssertionError)
         -> exception.escaped: STRING(False)
Span #3
    Trace ID       : e43e5d9b36d2fca2a5a0c2d9df82d156
    Parent ID      : a70b2403a8d907e0
    ID             : 9c5fc5a71bf629c8
    Name           : test_class
    Kind           : SPAN_KIND_INTERNAL
    Start time     : 2022-09-17 17:37:32.868157726 +0000 UTC
    End time       : 2022-09-17 17:37:32.868590283 +0000 UTC
    Status code    : STATUS_CODE_OK
    Status message : 
Attributes:
     -> code.filepath: STRING(tests/test_pytest.py)
     -> code.function: STRING(test_class)
     -> pytest.nodeid: STRING(tests/test_pytest.py::TestClass::test_class)
     -> pytest.keywords: STRING(<NodeKeywords for node <Function test_class>>)
     -> pytest.span_type: STRING(test)
     -> code.lineno: INT(4)
Span #4
    Trace ID       : e43e5d9b36d2fca2a5a0c2d9df82d156
    Parent ID      : 
    ID             : a70b2403a8d907e0
    Name           : test run
    Kind           : SPAN_KIND_INTERNAL
    Start time     : 2022-09-17 17:37:32.365355822 +0000 UTC
    End time       : 2022-09-17 17:37:32.868646843 +0000 UTC
    Status code    : STATUS_CODE_ERROR
    Status message : 
Attributes:
     -> pytest.span_type: STRING(run)
	{"kind": "exporter", "data_type": "traces", "name": "logging"}
2022-09-17T17:37:39.144Z	info	service/collector.go:159	Received signal from OS	{"signal": "interrupt"}
2022-09-17T17:37:39.144Z	info	service/collector.go:231	Starting shutdown...
2022-09-17T17:37:39.144Z	info	pipelines/pipelines.go:118	Stopping receivers...
2022-09-17T17:37:39.146Z	info	pipelines/pipelines.go:125	Stopping processors...
2022-09-17T17:37:39.146Z	info	pipelines/pipelines.go:132	Stopping exporters...
2022-09-17T17:37:39.146Z	info	extensions/extensions.go:56	Stopping extensions...
